import { _decorator, Component, Node } from 'cc';
import { DialogManager } from './DialogManager';
import { DialogUtils, DialogCharacters, DialogFactory } from './DialogUtils';
import { DialogData } from './DialogSystem';
const { ccclass, property } = _decorator;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏–≥—Ä—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
 */
@ccclass('DialogIntegrationManager')
export class DialogIntegrationManager extends Component {
    private static instance: DialogIntegrationManager = null;
    private dialogQueue: (() => void)[] = [];
    private isProcessingQueue: boolean = false;

    onLoad() {
        if (DialogIntegrationManager.instance === null) {
            DialogIntegrationManager.instance = this;
        } else {
            this.destroy();
            return;
        }
    }

    public static getInstance(): DialogIntegrationManager {
        return DialogIntegrationManager.instance;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–∫–∞–∑–∞
     */
    public queueDialog(dialogFunction: () => void) {
        this.dialogQueue.push(dialogFunction);
        this.processQueue();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–∏–∞–ª–æ–≥–æ–≤
     */
    private processQueue() {
        if (this.isProcessingQueue || this.dialogQueue.length === 0) {
            return;
        }

        const dialogManager = DialogManager.getInstance();
        if (dialogManager && dialogManager.isDialogActive()) {
            return; // –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
        }

        this.isProcessingQueue = true;
        const nextDialog = this.dialogQueue.shift();
        if (nextDialog) {
            nextDialog();
        }
        this.isProcessingQueue = false;
        
        // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        this.scheduleOnce(() => {
            this.processQueue();
        }, 0.1);
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞–π–Ω–∏–Ω–≥–∞
     */
    public showMiningDialog(resourceType: string, amount: number, onComplete?: () => void) {
        this.queueDialog(() => {
            const dialogs = this.createMiningDialog(resourceType, amount);
            DialogManager.getInstance()?.showDialog(dialogs, () => {
                this.isProcessingQueue = false;
                onComplete?.();
                this.processQueue();
            });
        });
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –±–æ—è
     */
    public showFightDialog(enemyType: string, onComplete?: () => void) {
        this.queueDialog(() => {
            const dialogs = this.createFightDialog(enemyType);
            DialogManager.getInstance()?.showDialog(dialogs, () => {
                this.isProcessingQueue = false;
                onComplete?.();
                this.processQueue();
            });
        });
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ª—É—á—à–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—è
     */
    public showShipUpgradeDialog(upgradeName: string, cost: number, onComplete?: () => void) {
        this.queueDialog(() => {
            const dialogs = this.createShipUpgradeDialog(upgradeName, cost);
            DialogManager.getInstance()?.showDialog(dialogs, () => {
                this.isProcessingQueue = false;
                onComplete?.();
                this.processQueue();
            });
        });
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public showTradeDialog(itemName: string, quantity: number, price: number, onComplete?: () => void) {
        this.queueDialog(() => {
            const dialogs = this.createTradeDialog(itemName, quantity, price);
            DialogManager.getInstance()?.showDialog(dialogs, () => {
                this.isProcessingQueue = false;
                onComplete?.();
                this.processQueue();
            });
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
     */
    public showAchievementDialog(achievementName: string, reward: string, onComplete?: () => void) {
        this.queueDialog(() => {
            const dialogs = this.createAchievementDialog(achievementName, reward);
            DialogManager.getInstance()?.showDialog(dialogs, () => {
                this.isProcessingQueue = false;
                onComplete?.();
                this.processQueue();
            });
        });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
     */
    private createMiningDialog(resourceType: string, amount: number): DialogData[] {
        return [
            {
                speaker: "–°–∫–∞–Ω–µ—Ä",
                text: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ª–µ–∂–∏ ${resourceType}!`,
                avatarIndex: DialogCharacters.SCANNER
            },
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–±—ã—á–∏. –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `–î–æ–±—ã—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: ${amount} ${resourceType}`,
                avatarIndex: DialogCharacters.SYSTEM
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –±–æ—è
     */
    private createFightDialog(enemyType: string): DialogData[] {
        return [
            {
                speaker: "–°–∫–∞–Ω–µ—Ä",
                text: `–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞ —Ä–∞–¥–∞—Ä–µ ${enemyType}!`,
                avatarIndex: DialogCharacters.SCANNER
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –±–æ—é! –ó–∞—Ä—è–¥–∏—Ç—å –≤—Å–µ –æ—Ä—É–¥–∏—è!",
                avatarIndex: DialogCharacters.CAPTAIN
            },
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ—é, –∫–∞–ø–∏—Ç–∞–Ω!",
                avatarIndex: DialogCharacters.AI_SHIP
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
     */
    private createShipUpgradeDialog(upgradeName: string, cost: number): DialogData[] {
        return [
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–ö–∞–ø–∏—Ç–∞–Ω, –≥–æ—Ç–æ–≤–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${upgradeName}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${cost} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–æ–≤`,
                avatarIndex: DialogCharacters.SYSTEM
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω", 
                text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–∞—à –∫–æ—Ä–∞–±–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    private createTradeDialog(itemName: string, quantity: number, price: number): DialogData[] {
        return [
            {
                speaker: "–¢–æ—Ä–≥–æ–≤–µ—Ü",
                text: `–ò–º–µ—é –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${quantity} ${itemName} –∑–∞ ${price} –∫—Ä–µ–¥–∏—Ç–æ–≤`,
                avatarIndex: DialogCharacters.TRADER
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private createAchievementDialog(achievementName: string, reward: string): DialogData[] {
        return [
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievementName}`,
                avatarIndex: DialogCharacters.SYSTEM
            },
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∫–∞–ø–∏—Ç–∞–Ω! –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${reward}`,
                avatarIndex: DialogCharacters.AI_SHIP
            }
        ];
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–∏–∞–ª–æ–≥–æ–≤
     */
    public clearQueue() {
        this.dialogQueue = [];
        this.isProcessingQueue = false;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
     */
    public getQueueLength(): number {
        return this.dialogQueue.length;
    }

    onDestroy() {
        if (DialogIntegrationManager.instance === this) {
            DialogIntegrationManager.instance = null;
        }
        this.clearQueue();
    }
}