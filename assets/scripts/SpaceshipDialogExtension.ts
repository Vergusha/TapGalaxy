import { _decorator, Component, Node } from 'cc';
import { DialogManager } from './DialogManager';
import { DialogIntegrationManager } from './DialogIntegrationManager';
import { DialogUtils, DialogCharacters } from './DialogUtils';
import { DialogData } from './DialogSystem';
const { ccclass, property } = _decorator;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π, —Ä–µ–º–æ–Ω—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–º
 */
@ccclass('SpaceshipDialogExtension')
export class SpaceshipDialogExtension extends Component {

    @property({ type: Boolean, displayName: "Show Upgrade Dialogs" })
    showUpgradeDialogs: boolean = true;

    @property({ type: Boolean, displayName: "Show Repair Dialogs" })
    showRepairDialogs: boolean = true;

    @property({ type: Boolean, displayName: "Show System Status Dialogs" })
    showSystemStatusDialogs: boolean = true;

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
     */
    public showShipUpgradeDialog(componentName: string, level: number, cost: number, onConfirm?: () => void, onCancel?: () => void) {
        if (!this.showUpgradeDialogs) {
            onConfirm?.();
            return;
        }

        const dialogs: DialogData[] = [
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${componentName} –¥–æ —É—Ä–æ–≤–Ω—è ${level}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–æ–≤`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–µ? –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–∞–±–ª—è.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onConfirm);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
     */
    public showUpgradeSuccessDialog(componentName: string, level: number, bonus: string, onComplete?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${componentName} (–£—Ä–æ–≤–µ–Ω—å ${level})`,
                avatarIndex: DialogCharacters.SYSTEM
            },
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–ë–æ–Ω—É—Å: ${bonus}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö–æ—Ä–∞–±–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –º–æ—â–Ω–µ–µ.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ—Ä–∞–±–ª—è
     */
    public showRepairDialog(damage: number, repairCost: number, onConfirm?: () => void) {
        if (!this.showRepairDialogs) {
            onConfirm?.();
            return;
        }

        let damageLevel = "";
        if (damage > 80) {
            damageLevel = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è";
        } else if (damage > 50) {
            damageLevel = "—Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è";
        } else if (damage > 20) {
            damageLevel = "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è";
        } else {
            damageLevel = "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è";
        }

        const dialogs: DialogData[] = [
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: ${damageLevel} (${damage}%)`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: ${repairCost} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–æ–≤`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ù–∞—á–∞—Ç—å —Ä–µ–º–æ–Ω—Ç? –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å–Ω–∏–∂–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onConfirm);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞
     */
    public showRepairCompleteDialog(onComplete?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: "–†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä–∞–±–ª—è –≤ –Ω–æ—Ä–º–µ.",
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è 100%",
                avatarIndex: DialogCharacters.SYSTEM
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º –∫–æ—Ä–∞–±–ª—è
     */
    public showSystemStatusDialog(systems: {name: string, status: number}[], onComplete?: () => void) {
        if (!this.showSystemStatusDialogs) {
            onComplete?.();
            return;
        }

        const dialogs: DialogData[] = [
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: "–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ—Ä–∞–±–ª—è:",
                avatarIndex: DialogCharacters.AI_SHIP
            }
        ];

        // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º–µ
        systems.forEach(system => {
            let statusText = "";
            if (system.status >= 90) {
                statusText = "–æ—Ç–ª–∏—á–Ω–æ–µ";
            } else if (system.status >= 70) {
                statusText = "—Ö–æ—Ä–æ—à–µ–µ";
            } else if (system.status >= 50) {
                statusText = "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ";
            } else {
                statusText = "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è";
            }

            dialogs.push({
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `${system.name}: ${system.status}% (${statusText})`,
                avatarIndex: DialogCharacters.AI_SHIP
            });
        });

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
     */
    public showCriticalFailureDialog(systemName: string, onComplete?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${systemName}`,
                avatarIndex: DialogCharacters.WARNING
            },
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∞–≤–∞—Ä–∏–π–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç!",
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–í—Å–µ–º –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–º–æ–Ω—Ç—É!",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏
     */
    public showLowPowerDialog(currentPower: number, requiredPower: number, onComplete?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: ${currentPower}/${requiredPower}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: "–†–µ–∫–æ–º–µ–Ω–¥—É—é —É–ª—É—á—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.",
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–∏. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ç–æ—Ä–∏—á–Ω–æ.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    public showNewEquipmentDialog(equipmentName: string, stats: string, onComplete?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${equipmentName}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–°–∏—Å—Ç–µ–º–∞",
                text: `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${stats}`,
                avatarIndex: DialogCharacters.SYSTEM
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∞–±–ª—è
     */
    public showOverloadDialog(currentLoad: number, maxLoad: number, onComplete?: () => void) {
        const overloadPercent = Math.round((currentLoad / maxLoad) * 100);

        const dialogs: DialogData[] = [
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∞–±–ª—è: ${overloadPercent}%`,
                avatarIndex: DialogCharacters.WARNING
            },
            {
                speaker: "–ò–Ω–∂–µ–Ω–µ—Ä",
                text: `–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${currentLoad}/${maxLoad}. –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å.`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ù—É–∂–Ω–æ –ª–∏–±–æ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è, –ª–∏–±–æ —É–ª—É—á—à–∏—Ç—å –≥—Ä—É–∑–æ–≤–æ–π –æ—Ç—Å–µ–∫.",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä—ã–∂–∫—É
     */
    public showHyperjumpReadyDialog(destination: string, fuelCost: number, onConfirm?: () => void) {
        const dialogs: DialogData[] = [
            {
                speaker: "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä",
                text: `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–ª–æ–∂–µ–Ω—ã. –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${destination}`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                text: `–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: ${fuelCost} –µ–¥–∏–Ω–∏—Ü. –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤.`,
                avatarIndex: DialogCharacters.AI_SHIP
            },
            {
                speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                text: "–ü—Ä—ã–∂–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω. –í—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≥–∏–ø–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É!",
                avatarIndex: DialogCharacters.CAPTAIN
            }
        ];

        DialogManager.getInstance()?.showDialog(dialogs, onConfirm);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
     */
    public showAutopilotDialog(isEnabled: boolean, destination?: string, onComplete?: () => void) {
        let dialogs: DialogData[];

        if (isEnabled) {
            dialogs = [
                {
                    speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                    text: `–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö—É—Ä—Å: ${destination || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`,
                    avatarIndex: DialogCharacters.AI_SHIP
                },
                {
                    speaker: "–°–∏—Å—Ç–µ–º–∞",
                    text: "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –≠–∫–∏–ø–∞–∂ –º–æ–∂–µ—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
                    avatarIndex: DialogCharacters.SYSTEM
                }
            ];
        } else {
            dialogs = [
                {
                    speaker: "–ò–ò –ö–æ—Ä–∞–±–ª—è",
                    text: "–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
                    avatarIndex: DialogCharacters.AI_SHIP
                },
                {
                    speaker: "–ö–∞–ø–∏—Ç–∞–Ω",
                    text: "–ü–æ–Ω—è–ª. –ë–µ—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–±—è.",
                    avatarIndex: DialogCharacters.CAPTAIN
                }
            ];
        }

        DialogManager.getInstance()?.showDialog(dialogs, onComplete);
    }
}